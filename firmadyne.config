#!/bin/sh

# uncomment and specify full path to FIRMADYNE repository
FIRMWARE_DIR=/firmadyne/
# Set here the directory where the FirmSolo results are stored
FS_OUT_DIR=/output/
# Set here the directory where the FirmSolo scripts are saved
FS_SCRIPT_DIR=/FirmSolo/


# specify full paths to other directories
BINARY_DIR=${FIRMWARE_DIR}/firmsolo_binaries/
TARBALL_DIR=${FS_OUT_DIR}/images/
SCRATCH_DIR=${FS_OUT_DIR}/firmadyne_results/
SCRIPT_DIR=${FIRMWARE_DIR}/scripts/


# functions to safely compute other paths

check_arch () {
    ARCHS=("armel" "armelv6" "armelv7" "mipseb" "mipsel")

    if [ -z "${1}" ]; then
        return 0
    fi

    match=0
    for i in "${ARCHS[@]}"; do
        if [ "${1}" == "$i" ]; then
            match=1
        fi
    done

    if [ "${match}" -eq 0 ]; then
        return 0
    fi

    return 1
}

check_number () {
    if [ "${1}" -ge 0 ]; then
        return 1
    fi

    return 0
}

check_root () {
    if [ "${EUID}" -eq 0 ]; then
        return 1
    fi

    return 0
}

get_console () {
    if check_arch "${1}"; then
        echo "Error: Invalid architecture!"
        exit 1
    fi

    echo "${BINARY_DIR}/console.${1}"
}

get_fs () {
    if check_number "${1}"; then
        echo "Error: Invalid image number!"
        exit 1
    fi

    echo "`get_scratch "${1}"`/image.raw"
}

get_fs_mount () {
    if check_number "${1}"; then
        echo "Error: Invalid image number!"
        exit 1
    fi

    echo "`get_scratch "${1}"`/image/"
}

get_kernel () {
    if check_arch "${1}"; then
        echo "Error: Invalid architecture!"
        exit 1
    fi

    KERN=`find ${FS_OUT_DIR}results/${2} -name "linux-*" -type d 2>/dev/null`
    case "${1}" in
        armel)
            echo "${KERN}/zImage"
            ;;
        armelv6)
            echo "${KERN}/zImage"
            ;;
        armelv7)
            echo "${KERN}/zImage"
            ;;
        mipseb)
            echo "${KERN}/vmlinux"
            ;;
        mipsel)
            echo "${KERN}/vmlinux"
            ;;
        *)
            echo "Error: Invalid architecture!"
            exit 1
    esac
}

get_nvram () {
    if check_arch "${1}"; then
        echo "Error: Invalid architecture!"
        exit 1
    fi

    echo "${BINARY_DIR}/libnvram.so.${1}"
}

get_qemu () {
    if check_arch "${1}"; then
        echo "Error: Invalid architecture!"
        exit 1
    fi

    case "${1}" in
        armel)
            echo "qemu-system-arm"
            ;;
        armelv6)
            echo "qemu-system-arm"
            ;;
        armelv7)
            echo "qemu-system-arm"
            ;;
        mipseb)
            echo "qemu-system-mips"
            ;;
        mipsel)
            echo "qemu-system-mipsel"
            ;;
        *)
            echo "Error: Invalid architecture!"
            exit 1
    esac
}

get_qemu_disk () {
    if check_arch "${1}"; then
        echo "Error: Invalid architecture!"
        exit 1
    fi

    case "${1}" in
        armel)
            echo "/dev/sda1"
            ;;
        armelv6)
            echo "/dev/mmcblk0p1"
            ;;
        armelv7)
            echo "/dev/mmcblk0p1"
            ;;
        mipseb)
            echo "/dev/hda1"
            ;;
        mipsel)
            echo "/dev/hda1"
            ;;
        *)
            echo "Error: Invalid architecture!"
            exit 1
    esac
}

get_qemu_machine () {
    if check_arch "${1}"; then
        echo "Error: Invalid architecture!"
        exit 1
    fi

    case "${1}" in
        armel)
            echo "versatilepb"
            ;;
        armelv6)
            echo "realview-eb-mpcore"
            ;;
        armelv7)
            echo "realview-pb-a8"
            ;;
        mipseb)
            echo "malta"
            ;;
        mipsel)
            echo "malta"
            ;;
        *)
            echo "Error: Invalid architecture!"
            exit 1
    esac
}

get_scratch () {
    if check_number "${1}"; then
        echo "Error: Invalid image number!"
        exit 1
    fi

    echo "${SCRATCH_DIR}/${IID}/"
}

get_device () {
    # Parses output from kpartx
    echo "/dev/mapper/$(echo $1 | cut -d ' ' -f 3)"
}

get_loop_dev () {
    # Parses output from losetup
    echo "/dev/$(echo $1 | cut -d ' ' -f 1 | cut -d '/' -f 3 | cut -d ':' -f 1)"
}
